// <auto-generated />
using System;
using BooksAndMore.Catalogue.Domain.Model.Authors;
using BooksAndMore.Catalogue.Domain.Model.Books;
using BooksAndMore.Catalogue.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BooksAndMore.Catalogue.Infrastructure.Data.Migrations.Migrations
{
    [DbContext(typeof(BooksCatalogueContext))]
    [Migration("20180507213018_AddedDataSeeding")]
    partial class AddedDataSeeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("catalogue")
                .HasAnnotation("ProductVersion", "2.1.0-rc1-32029")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:.AuthorsHiLoSequence", "'AuthorsHiLoSequence', '', '100', '100', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.BooksHiLoSequence", "'BooksHiLoSequence', '', '100', '100', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.PublisherIds", "'PublisherIds', '', '100', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BooksAndMore.Catalogue.Domain.Model.Authors.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "AuthorsHiLoSequence")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("AuthorType");

                    b.Property<string>("Bio");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("FullName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("[FirstName] + ' ' + [LastName]");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasDiscriminator<int>("AuthorType").HasValue(0);

                    b.HasData(
                        new { Id = 1, AuthorType = 0, FirstName = "Adam", LastName = "Mickiewicz" },
                        new { Id = 2, AuthorType = 0, FirstName = "Juliusz", LastName = "Słowacki" },
                        new { Id = 3, AuthorType = 0, FirstName = "William", LastName = "Shakespeare" },
                        new { Id = 4, AuthorType = 0, FirstName = "H.P", LastName = "Lovecraft" },
                        new { Id = 5, AuthorType = 0, FirstName = "Antoine", LastName = "de Saint-Exupéry" },
                        new { Id = 6, AuthorType = 0, FirstName = "A.A", LastName = "Milne" }
                    );
                });

            modelBuilder.Entity("BooksAndMore.Catalogue.Domain.Model.Books.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "BooksHiLoSequence")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<decimal>("AverageRating")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description");

                    b.Property<bool>("IsIllustrated");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasColumnName("ISBN")
                        .HasMaxLength(13);

                    b.Property<DateTime>("LastUpdateDateTime")
                        .ValueGeneratedOnUpdate()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("PublisherId");

                    b.Property<string>("State")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasDefaultValue("Active");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasAlternateKey("Isbn");

                    b.HasIndex("Isbn")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasDiscriminator<bool>("IsIllustrated").HasValue(false);

                    b.HasData(
                        new { Id = 1, CreateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 789, DateTimeKind.Utc), Isbn = "9788388736919", LastUpdateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 789, DateTimeKind.Utc), PublisherId = 1, State = "Active", Title = "Pan Tadeusz" },
                        new { Id = 2, CreateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 790, DateTimeKind.Utc), Isbn = "9788373899285", LastUpdateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 790, DateTimeKind.Utc), PublisherId = 1, State = "Active", Title = "Dziady" },
                        new { Id = 3, CreateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 790, DateTimeKind.Utc), Isbn = "9781500143640", LastUpdateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 790, DateTimeKind.Utc), PublisherId = 2, State = "Active", Title = "Sonety Krymskie" },
                        new { Id = 4, CreateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 790, DateTimeKind.Utc), Isbn = "9781498181334", LastUpdateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 790, DateTimeKind.Utc), PublisherId = 3, State = "Active", Title = "Konrad Wallenrod" },
                        new { Id = 5, CreateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 790, DateTimeKind.Utc), Isbn = "9788377916605", LastUpdateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 790, DateTimeKind.Utc), PublisherId = 2, State = "Active", Title = "Balladyna" },
                        new { Id = 6, CreateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 790, DateTimeKind.Utc), Isbn = "9780313208287", LastUpdateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 790, DateTimeKind.Utc), PublisherId = 1, State = "Active", Title = "Anhelli" },
                        new { Id = 7, CreateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 790, DateTimeKind.Utc), Isbn = "9876543210112", LastUpdateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 790, DateTimeKind.Utc), PublisherId = 3, State = "Active", Title = "Książka, której nigdy nie było" },
                        new { Id = 8, CreateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 790, DateTimeKind.Utc), Isbn = "9788496509290", LastUpdateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 790, DateTimeKind.Utc), PublisherId = 2, State = "Deleted", Title = "Makbet" },
                        new { Id = 9, CreateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 790, DateTimeKind.Utc), Isbn = "9781348101864", LastUpdateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 790, DateTimeKind.Utc), PublisherId = 2, State = "Active", Title = "Hamlet" },
                        new { Id = 10, CreateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 790, DateTimeKind.Utc), Isbn = "9781387317844", LastUpdateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 790, DateTimeKind.Utc), PublisherId = 1, State = "Active", Title = "Romeo i Julia" },
                        new { Id = 11, CreateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 790, DateTimeKind.Utc), Isbn = "9789510422311", LastUpdateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 790, DateTimeKind.Utc), PublisherId = 1, State = "Active", Title = "Ryszard III" },
                        new { Id = 12, CreateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 790, DateTimeKind.Utc), Isbn = "9781480297890", LastUpdateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 790, DateTimeKind.Utc), PublisherId = 3, State = "Active", Title = "Wiele hałasu o nic" }
                    );
                });

            modelBuilder.Entity("BooksAndMore.Catalogue.Domain.Model.Books.BookAuthor", b =>
                {
                    b.Property<int>("BookId");

                    b.Property<int>("AuthorId");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthors","catalogue");

                    b.HasData(
                        new { BookId = 1, AuthorId = 1 },
                        new { BookId = 2, AuthorId = 1 },
                        new { BookId = 3, AuthorId = 1 },
                        new { BookId = 4, AuthorId = 1 },
                        new { BookId = 5, AuthorId = 2 },
                        new { BookId = 6, AuthorId = 2 },
                        new { BookId = 7, AuthorId = 1 },
                        new { BookId = 7, AuthorId = 2 },
                        new { BookId = 8, AuthorId = 3 },
                        new { BookId = 9, AuthorId = 3 },
                        new { BookId = 10, AuthorId = 3 },
                        new { BookId = 11, AuthorId = 3 },
                        new { BookId = 12, AuthorId = 3 },
                        new { BookId = 13, AuthorId = 5 },
                        new { BookId = 14, AuthorId = 6 }
                    );
                });

            modelBuilder.Entity("BooksAndMore.Catalogue.Domain.Model.Books.BookIllustrator", b =>
                {
                    b.Property<int>("BookId");

                    b.Property<int>("IllustratorId");

                    b.HasKey("BookId", "IllustratorId");

                    b.HasIndex("IllustratorId");

                    b.ToTable("BookIllustrators","catalogue");

                    b.HasData(
                        new { BookId = 13, IllustratorId = 7 },
                        new { BookId = 14, IllustratorId = 8 }
                    );
                });

            modelBuilder.Entity("BooksAndMore.Catalogue.Domain.Model.Books.Reviews.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("Rating");

                    b.Property<string>("ReviewText");

                    b.Property<string>("ReviewerName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Reviews","catalogue");

                    b.HasData(
                        new { Id = 1, BookId = 1, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 824, DateTimeKind.Local), Rating = 3 },
                        new { Id = 2, BookId = 1, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 3 },
                        new { Id = 3, BookId = 1, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 5 },
                        new { Id = 4, BookId = 1, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 5 },
                        new { Id = 5, BookId = 2, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 2 },
                        new { Id = 6, BookId = 2, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 3 },
                        new { Id = 7, BookId = 3, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 1 },
                        new { Id = 8, BookId = 4, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 3 },
                        new { Id = 9, BookId = 4, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 4 },
                        new { Id = 10, BookId = 5, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 1 },
                        new { Id = 11, BookId = 5, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 2 },
                        new { Id = 12, BookId = 5, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 2 },
                        new { Id = 13, BookId = 5, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 3 },
                        new { Id = 14, BookId = 5, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 4 },
                        new { Id = 15, BookId = 5, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 3 },
                        new { Id = 16, BookId = 5, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 4 },
                        new { Id = 17, BookId = 5, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 5 },
                        new { Id = 18, BookId = 6, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 1 },
                        new { Id = 19, BookId = 6, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 2 },
                        new { Id = 20, BookId = 6, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 3 },
                        new { Id = 21, BookId = 6, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 5 },
                        new { Id = 22, BookId = 7, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 3 },
                        new { Id = 23, BookId = 7, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 1 },
                        new { Id = 24, BookId = 7, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 4 },
                        new { Id = 25, BookId = 8, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 3 },
                        new { Id = 26, BookId = 9, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 4 },
                        new { Id = 27, BookId = 10, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 2 },
                        new { Id = 28, BookId = 10, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 2 },
                        new { Id = 29, BookId = 10, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 1 },
                        new { Id = 30, BookId = 10, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 5 },
                        new { Id = 31, BookId = 11, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 5 },
                        new { Id = 32, BookId = 11, CreateDate = new DateTime(2018, 5, 7, 23, 30, 17, 826, DateTimeKind.Local), Rating = 5 }
                    );
                });

            modelBuilder.Entity("BooksAndMore.Catalogue.Domain.Model.Publishers.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEXT VALUE FOR catalogue.PublisherIds");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new { Id = 1, Name = "Wydawnictwo Rebis" },
                        new { Id = 2, Name = "Czarna Owca" },
                        new { Id = 3, Name = "Wydawnictwo Znak" }
                    );
                });

            modelBuilder.Entity("BooksAndMore.Catalogue.Domain.Model.Authors.Illustrator", b =>
                {
                    b.HasBaseType("BooksAndMore.Catalogue.Domain.Model.Authors.Author");


                    b.ToTable("Illustrator");

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new { Id = 7, AuthorType = 1, FirstName = "Antoine", LastName = "de Saint-Exupéry" },
                        new { Id = 8, AuthorType = 1, FirstName = "Ernest Howard", LastName = "Shepard" }
                    );
                });

            modelBuilder.Entity("BooksAndMore.Catalogue.Domain.Model.Books.IllustratedBook", b =>
                {
                    b.HasBaseType("BooksAndMore.Catalogue.Domain.Model.Books.Book");


                    b.ToTable("IllustratedBook");

                    b.HasDiscriminator().HasValue(true);

                    b.HasData(
                        new { Id = 13, CreateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 792, DateTimeKind.Utc), IsIllustrated = true, Isbn = "9788995317471", LastUpdateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 792, DateTimeKind.Utc), PublisherId = 3, State = "Active", Title = "Mały Książę" },
                        new { Id = 14, CreateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 792, DateTimeKind.Utc), IsIllustrated = true, Isbn = "9782230001040", LastUpdateDateTime = new DateTime(2018, 5, 7, 21, 30, 17, 792, DateTimeKind.Utc), PublisherId = 1, State = "Active", Title = "Kubuś Puchatek" }
                    );
                });

            modelBuilder.Entity("BooksAndMore.Catalogue.Domain.Model.Books.Book", b =>
                {
                    b.HasOne("BooksAndMore.Catalogue.Domain.Model.Publishers.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BooksAndMore.Catalogue.Domain.Model.Books.BookAuthor", b =>
                {
                    b.HasOne("BooksAndMore.Catalogue.Domain.Model.Authors.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BooksAndMore.Catalogue.Domain.Model.Books.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BooksAndMore.Catalogue.Domain.Model.Books.BookIllustrator", b =>
                {
                    b.HasOne("BooksAndMore.Catalogue.Domain.Model.Books.IllustratedBook", "Book")
                        .WithMany("BookIllustrators")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BooksAndMore.Catalogue.Domain.Model.Authors.Illustrator", "Illustrator")
                        .WithMany()
                        .HasForeignKey("IllustratorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BooksAndMore.Catalogue.Domain.Model.Books.Reviews.Review", b =>
                {
                    b.HasOne("BooksAndMore.Catalogue.Domain.Model.Books.Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BooksAndMore.Catalogue.Domain.Model.Publishers.Publisher", b =>
                {
                    b.OwnsOne("BooksAndMore.Catalogue.Domain.Model.Publishers.Address", "Address", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd();

                            b1.Property<string>("Apartment");

                            b1.Property<string>("Building");

                            b1.Property<string>("City");

                            b1.Property<string>("Country");

                            b1.Property<string>("Street");

                            b1.Property<string>("ZipCode");

                            b1.ToTable("Publishers","catalogue");

                            b1.HasOne("BooksAndMore.Catalogue.Domain.Model.Publishers.Publisher")
                                .WithOne("Address")
                                .HasForeignKey("BooksAndMore.Catalogue.Domain.Model.Publishers.Address", "Id")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasData(
                                new { Id = 1 },
                                new { Id = 2 },
                                new { Id = 3 }
                            );
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
